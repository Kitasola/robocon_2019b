// Generated by gencpp from file rc2019_commander/button.msg
// DO NOT EDIT!


#ifndef RC2019_COMMANDER_MESSAGE_BUTTON_H
#define RC2019_COMMANDER_MESSAGE_BUTTON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc2019_commander
{
template <class ContainerAllocator>
struct button_
{
  typedef button_<ContainerAllocator> Type;

  button_()
    : move_angle(0.0)
    , move_speed(0.0)
    , turn_right(false)
    , turn_left(false)
    , arm_data(false)
    , calibration(false)  {
    }
  button_(const ContainerAllocator& _alloc)
    : move_angle(0.0)
    , move_speed(0.0)
    , turn_right(false)
    , turn_left(false)
    , arm_data(false)
    , calibration(false)  {
  (void)_alloc;
    }



   typedef double _move_angle_type;
  _move_angle_type move_angle;

   typedef double _move_speed_type;
  _move_speed_type move_speed;

   typedef uint8_t _turn_right_type;
  _turn_right_type turn_right;

   typedef uint8_t _turn_left_type;
  _turn_left_type turn_left;

   typedef uint8_t _arm_data_type;
  _arm_data_type arm_data;

   typedef uint8_t _calibration_type;
  _calibration_type calibration;





  typedef boost::shared_ptr< ::rc2019_commander::button_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc2019_commander::button_<ContainerAllocator> const> ConstPtr;

}; // struct button_

typedef ::rc2019_commander::button_<std::allocator<void> > button;

typedef boost::shared_ptr< ::rc2019_commander::button > buttonPtr;
typedef boost::shared_ptr< ::rc2019_commander::button const> buttonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc2019_commander::button_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc2019_commander::button_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rc2019_commander

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rc2019_commander': ['/home/tsuruhara/robocon_2019b/mr/src/rc2019_commander/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rc2019_commander::button_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc2019_commander::button_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc2019_commander::button_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc2019_commander::button_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc2019_commander::button_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc2019_commander::button_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc2019_commander::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c703a9d0e274f7444bd1093549d0f0d5";
  }

  static const char* value(const ::rc2019_commander::button_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc703a9d0e274f744ULL;
  static const uint64_t static_value2 = 0x4bd1093549d0f0d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc2019_commander::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc2019_commander/button";
  }

  static const char* value(const ::rc2019_commander::button_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc2019_commander::button_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 move_angle\n\
float64 move_speed\n\
bool turn_right\n\
bool turn_left\n\
bool arm_data\n\
bool calibration\n\
";
  }

  static const char* value(const ::rc2019_commander::button_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc2019_commander::button_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_angle);
      stream.next(m.move_speed);
      stream.next(m.turn_right);
      stream.next(m.turn_left);
      stream.next(m.arm_data);
      stream.next(m.calibration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct button_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc2019_commander::button_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc2019_commander::button_<ContainerAllocator>& v)
  {
    s << indent << "move_angle: ";
    Printer<double>::stream(s, indent + "  ", v.move_angle);
    s << indent << "move_speed: ";
    Printer<double>::stream(s, indent + "  ", v.move_speed);
    s << indent << "turn_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_right);
    s << indent << "turn_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_left);
    s << indent << "arm_data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_data);
    s << indent << "calibration: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC2019_COMMANDER_MESSAGE_BUTTON_H
